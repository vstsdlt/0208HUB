// ----------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a compiler emitter: FACTS.Framework.Analysis.Generators.DAL.EntityEmitter
//
// Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using PFML.Shared.Model.DbDtos;
using FACTS.Framework.DAL;

namespace PFML.DAL.Model.DbEntities
{

    /// <summary>[Employer]</summary>
    [Table("Employer", Schema="dbo")]
    public class Employer : BaseEntity
    {

        /// <summary>[BusinessTypeCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("BusinessTypeCode")]
        public string BusinessTypeCode { get; set; }

        /// <summary>[CreateDateTime]</summary>
        [Required]
        [Column("CreateDateTime")]
        public DateTime CreateDateTime { get; set; }

        /// <summary>[CreateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("CreateUserId")]
        public string CreateUserId { get; set; }

        /// <summary>[EmployerId]</summary>
        [Key]
        [Required]
        [Column("EmployerId", Order=1)]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int EmployerId { get; set; }

        /// <summary>[EntityName]</summary>
        [Required]
        [MaxLength(80)]
        [Column("EntityName")]
        public string EntityName { get; set; }

        /// <summary>[EntityTypeCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("EntityTypeCode")]
        public string EntityTypeCode { get; set; }

        /// <summary>[FEIN]</summary>
        [Column("FEIN")]
        public int? Fein { get; set; }

        /// <summary>[HasPhysicalLocation]</summary>
        [Column("HasPhysicalLocation")]
        public bool? HasPhysicalLocation { get; set; }

        /// <summary>[HasTelecommuters]</summary>
        [Column("HasTelecommuters")]
        public bool? HasTelecommuter { get; set; }

        /// <summary>[IsAcquired]</summary>
        [Column("IsAcquired")]
        public bool? IsAcquired { get; set; }

        /// <summary>[IsApplyingForREIM]</summary>
        [Column("IsApplyingForREIM")]
        public bool? IsApplyingForREIM { get; set; }

        /// <summary>[IsClientOfPEO]</summary>
        [Column("IsClientOfPEO")]
        public bool? IsClientOfPEO { get; set; }

        /// <summary>[IsExemptUnderIRS501C3]</summary>
        [Column("IsExemptUnderIRS501C3")]
        public bool? IsExemptUnderIRS501C3 { get; set; }

        /// <summary>[IsIndividualContractor]</summary>
        [Column("IsIndividualContractor")]
        public bool? IsIndividualContractor { get; set; }

        /// <summary>[IsPresentInMultipleLoc]</summary>
        [Column("IsPresentInMultipleLoc")]
        public bool? IsPresentInMultipleLoc { get; set; }

        /// <summary>[IsProfessionalEmployerOrg]</summary>
        [Column("IsProfessionalEmployerOrg")]
        public bool? IsProfessionalEmployerOrg { get; set; }

        /// <summary>[IsServiceBegin]</summary>
        [Column("IsServiceBegin")]
        public bool? IsServiceBegin { get; set; }

        /// <summary>[LiabilityDate]</summary>
        [Column("LiabilityDate")]
        public DateTime? LiabilityDate { get; set; }

        /// <summary>[LiabilityIncurredDate]</summary>
        [Column("LiabilityIncurredDate")]
        public DateTime? LiabilityIncurredDate { get; set; }

        /// <summary>[NaicsCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("NaicsCode")]
        public string NaicsCode { get; set; }

        /// <summary>[NoOfEmployeesPaid]</summary>
        [Column("NoOfEmployeesPaid")]
        public int? NoOfEmployeesPaid { get; set; }

        /// <summary>[NoOfLocations]</summary>
        [Column("NoOfLocations")]
        public int? NoOfLocation { get; set; }

        /// <summary>[RegistrationDate]</summary>
        [Required]
        [Column("RegistrationDate")]
        public DateTime RegistrationDate { get; set; }

        /// <summary>[ReportMethodCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("ReportMethodCode")]
        public string ReportMethodCode { get; set; }

        /// <summary>[ServiceBeginDate]</summary>
        [Column("ServiceBeginDate")]
        public DateTime? ServiceBeginDate { get; set; }

        /// <summary>[StatusCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("StatusCode")]
        public string StatusCode { get; set; }

        /// <summary>[StatusDate]</summary>
        [Required]
        [Column("StatusDate")]
        public DateTime StatusDate { get; set; }

        /// <summary>[SubjectivityCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("SubjectivityCode")]
        public string SubjectivityCode { get; set; }

        /// <summary>[UpdateDateTime]</summary>
        [Required]
        [Column("UpdateDateTime")]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>[UpdateNumber]</summary>
        [Column("UpdateNumber")]
        [ConcurrencyCheck]
        public int? UpdateNumber { get; set; }

        /// <summary>[UpdateProcess]</summary>
        [MaxLength(100)]
        [Column("UpdateProcess")]
        public string UpdateProcess { get; set; }

        /// <summary>[UpdateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("UpdateUserId")]
        public string UpdateUserId { get; set; }

        /// <summary>[UserName]</summary>
        [Required]
        [MaxLength(10)]
        [Column("UserName")]
        public string UserName { get; set; }

        private ICollection<AddressLink> addressLinks { get; set; }
        public virtual ICollection<AddressLink> AddressLinks { get { return addressLinks ?? (addressLinks = new Collection<AddressLink>()); } protected set { addressLinks = value; } }

        private ICollection<Correspondence> correspondences { get; set; }
        public virtual ICollection<Correspondence> Correspondences { get { return correspondences ?? (correspondences = new Collection<Correspondence>()); } protected set { correspondences = value; } }

        private ICollection<EmployerAccountTransaction> employerAccountTransactions { get; set; }
        public virtual ICollection<EmployerAccountTransaction> EmployerAccountTransactions { get { return employerAccountTransactions ?? (employerAccountTransactions = new Collection<EmployerAccountTransaction>()); } protected set { employerAccountTransactions = value; } }

        private ICollection<EmployerContact> employerContacts { get; set; }
        public virtual ICollection<EmployerContact> EmployerContacts { get { return employerContacts ?? (employerContacts = new Collection<EmployerContact>()); } protected set { employerContacts = value; } }

        public virtual EmployerLiability EmployerLiability { get; set; }

        public virtual EmployerPreference EmployerPreference { get; set; }

        private ICollection<EmployerUnit> employerUnits { get; set; }
        public virtual ICollection<EmployerUnit> EmployerUnits { get { return employerUnits ?? (employerUnits = new Collection<EmployerUnit>()); } protected set { employerUnits = value; } }

        private ICollection<PaymentMain> paymentMains { get; set; }
        public virtual ICollection<PaymentMain> PaymentMains { get { return paymentMains ?? (paymentMains = new Collection<PaymentMain>()); } protected set { paymentMains = value; } }

        private ICollection<PaymentProfile> paymentProfiles { get; set; }
        public virtual ICollection<PaymentProfile> PaymentProfiles { get { return paymentProfiles ?? (paymentProfiles = new Collection<PaymentProfile>()); } protected set { paymentProfiles = value; } }

        private ICollection<PremiumAppealHeader> premiumAppealHeaders { get; set; }
        public virtual ICollection<PremiumAppealHeader> PremiumAppealHeaders { get { return premiumAppealHeaders ?? (premiumAppealHeaders = new Collection<PremiumAppealHeader>()); } protected set { premiumAppealHeaders = value; } }

        private ICollection<TaxableAmountSum> taxableAmountSums { get; set; }
        public virtual ICollection<TaxableAmountSum> TaxableAmountSums { get { return taxableAmountSums ?? (taxableAmountSums = new Collection<TaxableAmountSum>()); } protected set { taxableAmountSums = value; } }

        private ICollection<VoluntaryPlanWaiverRequest> voluntaryPlanWaiverRequests { get; set; }
        public virtual ICollection<VoluntaryPlanWaiverRequest> VoluntaryPlanWaiverRequests { get { return voluntaryPlanWaiverRequests ?? (voluntaryPlanWaiverRequests = new Collection<VoluntaryPlanWaiverRequest>()); } protected set { voluntaryPlanWaiverRequests = value; } }

        private ICollection<WageUnitDetail> wageUnitDetails { get; set; }
        public virtual ICollection<WageUnitDetail> WageUnitDetails { get { return wageUnitDetails ?? (wageUnitDetails = new Collection<WageUnitDetail>()); } protected set { wageUnitDetails = value; } }

        public override void SetAuditFields(EntityState state)
        {
            string username = FACTS.Framework.Service.Context.UserName ?? "UNKNOWN";
            DateTime timestamp = FACTS.Framework.Utility.DateTimeUtil.Now;

            if (state == EntityState.Added)
            {
                CreateUserId = username;
                CreateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = 0;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
            else if (state == EntityState.Modified)
            {
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = (UpdateNumber ?? 0) + 1;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
        }

        internal static void ModelCreating(DbModelBuilder builder)
        {
            builder.Entity<Employer>().Property(x => x.BusinessTypeCode).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.CreateUserId).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.EntityName).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.EntityTypeCode).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.NaicsCode).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.ReportMethodCode).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.StatusCode).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.SubjectivityCode).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.UpdateProcess).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.UpdateUserId).IsUnicode(false);
            builder.Entity<Employer>().Property(x => x.UserName).IsUnicode(false);
        }

        /// <summary>Convert from Employer entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>Resultant Employer DTO</returns>
        public EmployerDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            return ToDtoDeep(dbContext, null, dtoTypes, null);
        }

        /// <summary>Convert from Employer entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>Resultant Employer DTO</returns>
        public EmployerDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, EmployerDto dto, params Type[] dtoTypes)
        {
            return ToDtoDeep(dbContext, dto, dtoTypes, null);
        }

        internal EmployerDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, EmployerDto dto, Type[] dtoTypes, Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos)
        {
            entityDtos = entityDtos ?? new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            if (entityDtos.ContainsKey(this))
            {
                return (EmployerDto)entityDtos[this];
            }

            dto = ToDto(dto);
            entityDtos.Add(this, dto);

            System.Data.Entity.Infrastructure.DbEntityEntry<Employer> entry = dbContext?.Entry(this);
            dto.IsNew = (entry?.State == EntityState.Added);
            dto.IsDeleted = (entry?.State == EntityState.Deleted);

            if (entry?.Collection(x => x.AddressLinks)?.IsLoaded == true)
            {
                foreach (AddressLink addressLink in AddressLinks)
                {
                    dto.AddressLinks.Add(addressLink.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressLinkDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.Correspondences)?.IsLoaded == true)
            {
                foreach (Correspondence correspondence in Correspondences)
                {
                    dto.Correspondences.Add(correspondence.ToDtoDeep(dbContext, BaseEntity.ActivateDto<CorrespondenceDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.EmployerAccountTransactions)?.IsLoaded == true)
            {
                foreach (EmployerAccountTransaction employerAccountTransaction in EmployerAccountTransactions)
                {
                    dto.EmployerAccountTransactions.Add(employerAccountTransaction.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerAccountTransactionDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.EmployerContacts)?.IsLoaded == true)
            {
                foreach (EmployerContact employerContact in EmployerContacts)
                {
                    dto.EmployerContacts.Add(employerContact.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerContactDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Reference(x => x.EmployerLiability)?.IsLoaded == true)
            {
                dto.EmployerLiability = EmployerLiability?.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerLiabilityDto>(dtoTypes), dtoTypes, entityDtos);
            }
            if (entry?.Reference(x => x.EmployerPreference)?.IsLoaded == true)
            {
                dto.EmployerPreference = EmployerPreference?.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerPreferenceDto>(dtoTypes), dtoTypes, entityDtos);
            }
            if (entry?.Collection(x => x.EmployerUnits)?.IsLoaded == true)
            {
                foreach (EmployerUnit employerUnit in EmployerUnits)
                {
                    dto.EmployerUnits.Add(employerUnit.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerUnitDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.PaymentMains)?.IsLoaded == true)
            {
                foreach (PaymentMain paymentMain in PaymentMains)
                {
                    dto.PaymentMains.Add(paymentMain.ToDtoDeep(dbContext, BaseEntity.ActivateDto<PaymentMainDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.PaymentProfiles)?.IsLoaded == true)
            {
                foreach (PaymentProfile paymentProfile in PaymentProfiles)
                {
                    dto.PaymentProfiles.Add(paymentProfile.ToDtoDeep(dbContext, BaseEntity.ActivateDto<PaymentProfileDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.PremiumAppealHeaders)?.IsLoaded == true)
            {
                foreach (PremiumAppealHeader premiumAppealHeader in PremiumAppealHeaders)
                {
                    dto.PremiumAppealHeaders.Add(premiumAppealHeader.ToDtoDeep(dbContext, BaseEntity.ActivateDto<PremiumAppealHeaderDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.TaxableAmountSums)?.IsLoaded == true)
            {
                foreach (TaxableAmountSum taxableAmountSum in TaxableAmountSums)
                {
                    dto.TaxableAmountSums.Add(taxableAmountSum.ToDtoDeep(dbContext, BaseEntity.ActivateDto<TaxableAmountSumDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.VoluntaryPlanWaiverRequests)?.IsLoaded == true)
            {
                foreach (VoluntaryPlanWaiverRequest voluntaryPlanWaiverRequest in VoluntaryPlanWaiverRequests)
                {
                    dto.VoluntaryPlanWaiverRequests.Add(voluntaryPlanWaiverRequest.ToDtoDeep(dbContext, BaseEntity.ActivateDto<VoluntaryPlanWaiverRequestDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.WageUnitDetails)?.IsLoaded == true)
            {
                foreach (WageUnitDetail wageUnitDetail in WageUnitDetails)
                {
                    dto.WageUnitDetails.Add(wageUnitDetail.ToDtoDeep(dbContext, BaseEntity.ActivateDto<WageUnitDetailDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }

            return dto;
        }

        /// <summary>Convert from Employer entity to DTO w/o checking entity state or entity navigation</summary>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <returns>Resultant Employer DTO</returns>
        public EmployerDto ToDto(EmployerDto dto = null)
        {
            dto = dto ?? new EmployerDto();
            dto.IsNew = false;

            dto.BusinessTypeCode = BusinessTypeCode;
            dto.CreateDateTime = CreateDateTime;
            dto.CreateUserId = CreateUserId;
            dto.EmployerId = EmployerId;
            dto.EntityName = EntityName;
            dto.EntityTypeCode = EntityTypeCode;
            dto.Fein = Fein;
            dto.HasPhysicalLocation = HasPhysicalLocation;
            dto.HasTelecommuter = HasTelecommuter;
            dto.IsAcquired = IsAcquired;
            dto.IsApplyingForREIM = IsApplyingForREIM;
            dto.IsClientOfPEO = IsClientOfPEO;
            dto.IsExemptUnderIRS501C3 = IsExemptUnderIRS501C3;
            dto.IsIndividualContractor = IsIndividualContractor;
            dto.IsPresentInMultipleLoc = IsPresentInMultipleLoc;
            dto.IsProfessionalEmployerOrg = IsProfessionalEmployerOrg;
            dto.IsServiceBegin = IsServiceBegin;
            dto.LiabilityDate = LiabilityDate;
            dto.LiabilityIncurredDate = LiabilityIncurredDate;
            dto.NaicsCode = NaicsCode;
            dto.NoOfEmployeesPaid = NoOfEmployeesPaid;
            dto.NoOfLocation = NoOfLocation;
            dto.RegistrationDate = RegistrationDate;
            dto.ReportMethodCode = ReportMethodCode;
            dto.ServiceBeginDate = ServiceBeginDate;
            dto.StatusCode = StatusCode;
            dto.StatusDate = StatusDate;
            dto.SubjectivityCode = SubjectivityCode;
            dto.UpdateDateTime = UpdateDateTime;
            dto.UpdateNumber = UpdateNumber;
            dto.UpdateProcess = UpdateProcess;
            dto.UpdateUserId = UpdateUserId;
            dto.UserName = UserName;

            return dto;
        }

        /// <summary>Convert from Employer DTO to entity</summary>
        /// <param name="dbContext">DB Context to use for attaching entity</param>
        /// <param name="dto">DTO to convert from</param>
        /// <returns>Resultant Employer entity</returns>
        public static Employer FromDto(FACTS.Framework.DAL.DbContext dbContext, EmployerDto dto)
        {
            return FromDto(dbContext, dto, dtoEntities: null);
        }

        internal static Employer FromDto(FACTS.Framework.DAL.DbContext dbContext, EmployerDto dto, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities)
        {
            dtoEntities = dtoEntities ?? new Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity>();
            if (dtoEntities.ContainsKey(dto))
            {
                return (Employer)dtoEntities[dto];
            }

            Employer entity = new Employer();
            dtoEntities.Add(dto, entity);
            FromDtoSet(dbContext, dto, entity, dtoEntities);

            if (dbContext != null && (!dto.IsDeleted || !dto.IsNew))
            {
                dbContext.Entry(entity).State = (dto.IsNew ? EntityState.Added : (dto.IsDeleted ? EntityState.Deleted : EntityState.Modified));
            }

            return entity;
        }

        protected static void FromDtoSet(FACTS.Framework.DAL.DbContext dbContext, EmployerDto dto, Employer entity, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities)
        {
            entity.BusinessTypeCode = dto.BusinessTypeCode;
            entity.CreateDateTime = dto.CreateDateTime;
            entity.CreateUserId = dto.CreateUserId;
            entity.EmployerId = dto.EmployerId;
            entity.EntityName = dto.EntityName;
            entity.EntityTypeCode = dto.EntityTypeCode;
            entity.Fein = dto.Fein;
            entity.HasPhysicalLocation = dto.HasPhysicalLocation;
            entity.HasTelecommuter = dto.HasTelecommuter;
            entity.IsAcquired = dto.IsAcquired;
            entity.IsApplyingForREIM = dto.IsApplyingForREIM;
            entity.IsClientOfPEO = dto.IsClientOfPEO;
            entity.IsExemptUnderIRS501C3 = dto.IsExemptUnderIRS501C3;
            entity.IsIndividualContractor = dto.IsIndividualContractor;
            entity.IsPresentInMultipleLoc = dto.IsPresentInMultipleLoc;
            entity.IsProfessionalEmployerOrg = dto.IsProfessionalEmployerOrg;
            entity.IsServiceBegin = dto.IsServiceBegin;
            entity.LiabilityDate = dto.LiabilityDate;
            entity.LiabilityIncurredDate = dto.LiabilityIncurredDate;
            entity.NaicsCode = dto.NaicsCode;
            entity.NoOfEmployeesPaid = dto.NoOfEmployeesPaid;
            entity.NoOfLocation = dto.NoOfLocation;
            entity.RegistrationDate = dto.RegistrationDate;
            entity.ReportMethodCode = dto.ReportMethodCode;
            entity.ServiceBeginDate = dto.ServiceBeginDate;
            entity.StatusCode = dto.StatusCode;
            entity.StatusDate = dto.StatusDate;
            entity.SubjectivityCode = dto.SubjectivityCode;
            entity.UpdateDateTime = dto.UpdateDateTime;
            entity.UpdateNumber = dto.UpdateNumber;
            entity.UpdateProcess = dto.UpdateProcess;
            entity.UpdateUserId = dto.UpdateUserId;
            entity.UserName = dto.UserName;

            if (dto.AddressLinks != null)
            {
                foreach (AddressLinkDto addressLinkDto in dto.AddressLinks)
                {
                    var addressLink = DbEntities.AddressLink.FromDto(dbContext, addressLinkDto, dtoEntities);
                    if (addressLinkDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.AddressLinks.Add(addressLink);
                }
            }
            if (dto.Correspondences != null)
            {
                foreach (CorrespondenceDto correspondenceDto in dto.Correspondences)
                {
                    var correspondence = DbEntities.Correspondence.FromDto(dbContext, correspondenceDto, dtoEntities);
                    if (correspondenceDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.Correspondences.Add(correspondence);
                }
            }
            if (dto.EmployerAccountTransactions != null)
            {
                foreach (EmployerAccountTransactionDto employerAccountTransactionDto in dto.EmployerAccountTransactions)
                {
                    var employerAccountTransaction = DbEntities.EmployerAccountTransaction.FromDto(dbContext, employerAccountTransactionDto, dtoEntities);
                    if (employerAccountTransactionDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.EmployerAccountTransactions.Add(employerAccountTransaction);
                }
            }
            if (dto.EmployerContacts != null)
            {
                foreach (EmployerContactDto employerContactDto in dto.EmployerContacts)
                {
                    var employerContact = DbEntities.EmployerContact.FromDto(dbContext, employerContactDto, dtoEntities);
                    if (employerContactDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.EmployerContacts.Add(employerContact);
                }
            }
            var employerLiability = (dto.EmployerLiability == null) ? null : EmployerLiability.FromDto(dbContext, dto.EmployerLiability, dtoEntities);
            entity.EmployerLiability = (dto.EmployerLiability == null || dto.EmployerLiability.IsDeleted) ? null : employerLiability;
            var employerPreference = (dto.EmployerPreference == null) ? null : EmployerPreference.FromDto(dbContext, dto.EmployerPreference, dtoEntities);
            entity.EmployerPreference = (dto.EmployerPreference == null || dto.EmployerPreference.IsDeleted) ? null : employerPreference;
            if (dto.EmployerUnits != null)
            {
                foreach (EmployerUnitDto employerUnitDto in dto.EmployerUnits)
                {
                    var employerUnit = DbEntities.EmployerUnit.FromDto(dbContext, employerUnitDto, dtoEntities);
                    if (employerUnitDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.EmployerUnits.Add(employerUnit);
                }
            }
            if (dto.PaymentMains != null)
            {
                foreach (PaymentMainDto paymentMainDto in dto.PaymentMains)
                {
                    var paymentMain = DbEntities.PaymentMain.FromDto(dbContext, paymentMainDto, dtoEntities);
                    if (paymentMainDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.PaymentMains.Add(paymentMain);
                }
            }
            if (dto.PaymentProfiles != null)
            {
                foreach (PaymentProfileDto paymentProfileDto in dto.PaymentProfiles)
                {
                    var paymentProfile = DbEntities.PaymentProfile.FromDto(dbContext, paymentProfileDto, dtoEntities);
                    if (paymentProfileDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.PaymentProfiles.Add(paymentProfile);
                }
            }
            if (dto.PremiumAppealHeaders != null)
            {
                foreach (PremiumAppealHeaderDto premiumAppealHeaderDto in dto.PremiumAppealHeaders)
                {
                    var premiumAppealHeader = DbEntities.PremiumAppealHeader.FromDto(dbContext, premiumAppealHeaderDto, dtoEntities);
                    if (premiumAppealHeaderDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.PremiumAppealHeaders.Add(premiumAppealHeader);
                }
            }
            if (dto.TaxableAmountSums != null)
            {
                foreach (TaxableAmountSumDto taxableAmountSumDto in dto.TaxableAmountSums)
                {
                    var taxableAmountSum = DbEntities.TaxableAmountSum.FromDto(dbContext, taxableAmountSumDto, dtoEntities);
                    if (taxableAmountSumDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.TaxableAmountSums.Add(taxableAmountSum);
                }
            }
            if (dto.VoluntaryPlanWaiverRequests != null)
            {
                foreach (VoluntaryPlanWaiverRequestDto voluntaryPlanWaiverRequestDto in dto.VoluntaryPlanWaiverRequests)
                {
                    var voluntaryPlanWaiverRequest = DbEntities.VoluntaryPlanWaiverRequest.FromDto(dbContext, voluntaryPlanWaiverRequestDto, dtoEntities);
                    if (voluntaryPlanWaiverRequestDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.VoluntaryPlanWaiverRequests.Add(voluntaryPlanWaiverRequest);
                }
            }
            if (dto.WageUnitDetails != null)
            {
                foreach (WageUnitDetailDto wageUnitDetailDto in dto.WageUnitDetails)
                {
                    var wageUnitDetail = DbEntities.WageUnitDetail.FromDto(dbContext, wageUnitDetailDto, dtoEntities);
                    if (wageUnitDetailDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.WageUnitDetails.Add(wageUnitDetail);
                }
            }
        }

    }

    /// <summary>Extension methods related to Employer entity</summary>
    public static class EmployerExtension
    {

        /// <summary>Convert IEnumerable Employer to list of DTOs</summary>
        /// <param name="entities">IEnumerable Employers</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO Employers</returns>
        public static List<EmployerDto> ToDtoListDeep(this IEnumerable<Employer> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<EmployerDto> dtos = new List<EmployerDto>();
            foreach (Employer entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerDto>(dtoTypes), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E Employer to list of DTOs</summary>
        /// <param name="entities">L2E Employers</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO Employers</returns>
        public static List<EmployerDto> ToDtoListDeep(this IQueryable<Employer> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<EmployerDto> dtos = new List<EmployerDto>();
            foreach (Employer entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerDto>(dtoTypes), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E Employer to list of customized DTOs</summary>
        /// <typeparam name="T">Custom DTO derived from EmployerDto</typeparam>
        /// <param name="entities">L2E Employers</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO customized Employers</returns>
        public static List<T> ToDtoListDeep<T>(this IQueryable<Employer> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes) where T : EmployerDto, new()
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<T> dtos = new List<T>();
            foreach (Employer entity in entities)
            {
                dtos.Add((T)entity.ToDtoDeep(dbContext, new T(), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert IEnumerable Employer to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">IEnumerable Employers</param>
        /// <returns>List of DTO Employers</returns>
        public static List<EmployerDto> ToDtoList(this IEnumerable<Employer> entities)
        {
            List<EmployerDto> dtos = new List<EmployerDto>();
            foreach (Employer entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E Employer to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">L2E Employers</param>
        /// <returns>List of DTO Employers</returns>
        public static List<EmployerDto> ToDtoList(this IQueryable<Employer> entities)
        {
            List<EmployerDto> dtos = new List<EmployerDto>();
            foreach (Employer entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E Employer to list of customized DTOs w/o checking entity state or entity navigation</summary>
        /// <typeparam name="T">Custom DTO derived from EmployerDto</typeparam>
        /// <param name="entities">L2E Employers</param>
        /// <returns>List of DTO customized Employers</returns>
        public static List<T> ToDtoList<T>(this IQueryable<Employer> entities) where T : EmployerDto, new()
        {
            List<T> dtos = new List<T>();
            foreach (Employer entity in entities)
            {
                dtos.Add((T)entity.ToDto(new T()));
            }
            return dtos;
        }

    }

}
