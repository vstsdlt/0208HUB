// ----------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a compiler emitter: FACTS.Framework.Analysis.Generators.DAL.EntityEmitter
//
// Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using PFML.Shared.Model.DbDtos;
using FACTS.Framework.DAL;

namespace PFML.DAL.Model.DbEntities
{

    /// <summary>[AddressLink]</summary>
    [Table("AddressLink", Schema="dbo")]
    public class AddressLink : BaseEntity
    {

        /// <summary>[AddressId]</summary>
        [Required]
        [Column("AddressId")]
        public int AddressId { get; set; }

        /// <summary>[AddressLinkId]</summary>
        [Key]
        [Required]
        [Column("AddressLinkId", Order=1)]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int AddressLinkId { get; set; }

        /// <summary>[AddressTypeCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("AddressTypeCode")]
        public string AddressTypeCode { get; set; }

        /// <summary>[AgentId]</summary>
        [Column("AgentId")]
        public int? AgentId { get; set; }

        /// <summary>[CreateDateTime]</summary>
        [Required]
        [Column("CreateDateTime")]
        public DateTime CreateDateTime { get; set; }

        /// <summary>[CreateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("CreateUserId")]
        public string CreateUserId { get; set; }

        /// <summary>[EmployerId]</summary>
        [Column("EmployerId")]
        public int? EmployerId { get; set; }

        /// <summary>[EmployerUnitId]</summary>
        [Column("EmployerUnitId")]
        public int? EmployerUnitId { get; set; }

        /// <summary>[StatusCode]</summary>
        [MaxLength(20)]
        [Column("StatusCode")]
        public string StatusCode { get; set; }

        /// <summary>[UpdateDateTime]</summary>
        [Required]
        [Column("UpdateDateTime")]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>[UpdateNumber]</summary>
        [Column("UpdateNumber")]
        [ConcurrencyCheck]
        public int? UpdateNumber { get; set; }

        /// <summary>[UpdateProcess]</summary>
        [MaxLength(100)]
        [Column("UpdateProcess")]
        public string UpdateProcess { get; set; }

        /// <summary>[UpdateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("UpdateUserId")]
        public string UpdateUserId { get; set; }

        public virtual Address Address { get; set; }

        public virtual Employer Employer { get; set; }

        public virtual EmployerUnit EmployerUnit { get; set; }

        private ICollection<Correspondence> correspondences { get; set; }
        public virtual ICollection<Correspondence> Correspondences { get { return correspondences ?? (correspondences = new Collection<Correspondence>()); } protected set { correspondences = value; } }

        private ICollection<PremiumAppealDetail> premiumAppealDetails { get; set; }
        public virtual ICollection<PremiumAppealDetail> PremiumAppealDetails { get { return premiumAppealDetails ?? (premiumAppealDetails = new Collection<PremiumAppealDetail>()); } protected set { premiumAppealDetails = value; } }

        public override void SetAuditFields(EntityState state)
        {
            string username = FACTS.Framework.Service.Context.UserName ?? "UNKNOWN";
            DateTime timestamp = FACTS.Framework.Utility.DateTimeUtil.Now;

            if (state == EntityState.Added)
            {
                CreateUserId = username;
                CreateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = 0;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
            else if (state == EntityState.Modified)
            {
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = (UpdateNumber ?? 0) + 1;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
        }

        internal static void ModelCreating(DbModelBuilder builder)
        {
            builder.Entity<AddressLink>().Property(x => x.AddressTypeCode).IsUnicode(false);
            builder.Entity<AddressLink>().Property(x => x.CreateUserId).IsUnicode(false);
            builder.Entity<AddressLink>().Property(x => x.StatusCode).IsUnicode(false);
            builder.Entity<AddressLink>().Property(x => x.UpdateProcess).IsUnicode(false);
            builder.Entity<AddressLink>().Property(x => x.UpdateUserId).IsUnicode(false);
            builder.Entity<AddressLink>().HasRequired(x => x.Address).WithMany(x => x.AddressLinks).HasForeignKey(x => x.AddressId);
            builder.Entity<AddressLink>().HasOptional(x => x.Employer).WithMany(x => x.AddressLinks).HasForeignKey(x => x.EmployerId);
            builder.Entity<AddressLink>().HasOptional(x => x.EmployerUnit).WithMany(x => x.AddressLinks).HasForeignKey(x => x.EmployerUnitId);
        }

        /// <summary>Convert from AddressLink entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>Resultant AddressLink DTO</returns>
        public AddressLinkDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            return ToDtoDeep(dbContext, null, dtoTypes, null);
        }

        /// <summary>Convert from AddressLink entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>Resultant AddressLink DTO</returns>
        public AddressLinkDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, AddressLinkDto dto, params Type[] dtoTypes)
        {
            return ToDtoDeep(dbContext, dto, dtoTypes, null);
        }

        internal AddressLinkDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, AddressLinkDto dto, Type[] dtoTypes, Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos)
        {
            entityDtos = entityDtos ?? new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            if (entityDtos.ContainsKey(this))
            {
                return (AddressLinkDto)entityDtos[this];
            }

            dto = ToDto(dto);
            entityDtos.Add(this, dto);

            System.Data.Entity.Infrastructure.DbEntityEntry<AddressLink> entry = dbContext?.Entry(this);
            dto.IsNew = (entry?.State == EntityState.Added);
            dto.IsDeleted = (entry?.State == EntityState.Deleted);

            if (entry?.Reference(x => x.Address)?.IsLoaded == true)
            {
                dto.Address = Address?.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressDto>(dtoTypes), dtoTypes, entityDtos);
            }
            if (entry?.Reference(x => x.Employer)?.IsLoaded == true)
            {
                dto.Employer = Employer?.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerDto>(dtoTypes), dtoTypes, entityDtos);
            }
            if (entry?.Reference(x => x.EmployerUnit)?.IsLoaded == true)
            {
                dto.EmployerUnit = EmployerUnit?.ToDtoDeep(dbContext, BaseEntity.ActivateDto<EmployerUnitDto>(dtoTypes), dtoTypes, entityDtos);
            }
            if (entry?.Collection(x => x.Correspondences)?.IsLoaded == true)
            {
                foreach (Correspondence correspondence in Correspondences)
                {
                    dto.Correspondences.Add(correspondence.ToDtoDeep(dbContext, BaseEntity.ActivateDto<CorrespondenceDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }
            if (entry?.Collection(x => x.PremiumAppealDetails)?.IsLoaded == true)
            {
                foreach (PremiumAppealDetail premiumAppealDetail in PremiumAppealDetails)
                {
                    dto.PremiumAppealDetails.Add(premiumAppealDetail.ToDtoDeep(dbContext, BaseEntity.ActivateDto<PremiumAppealDetailDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }

            return dto;
        }

        /// <summary>Convert from AddressLink entity to DTO w/o checking entity state or entity navigation</summary>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <returns>Resultant AddressLink DTO</returns>
        public AddressLinkDto ToDto(AddressLinkDto dto = null)
        {
            dto = dto ?? new AddressLinkDto();
            dto.IsNew = false;

            dto.AddressId = AddressId;
            dto.AddressLinkId = AddressLinkId;
            dto.AddressTypeCode = AddressTypeCode;
            dto.AgentId = AgentId;
            dto.CreateDateTime = CreateDateTime;
            dto.CreateUserId = CreateUserId;
            dto.EmployerId = EmployerId;
            dto.EmployerUnitId = EmployerUnitId;
            dto.StatusCode = StatusCode;
            dto.UpdateDateTime = UpdateDateTime;
            dto.UpdateNumber = UpdateNumber;
            dto.UpdateProcess = UpdateProcess;
            dto.UpdateUserId = UpdateUserId;

            return dto;
        }

        /// <summary>Convert from AddressLink DTO to entity</summary>
        /// <param name="dbContext">DB Context to use for attaching entity</param>
        /// <param name="dto">DTO to convert from</param>
        /// <returns>Resultant AddressLink entity</returns>
        public static AddressLink FromDto(FACTS.Framework.DAL.DbContext dbContext, AddressLinkDto dto)
        {
            return FromDto(dbContext, dto, dtoEntities: null);
        }

        internal static AddressLink FromDto(FACTS.Framework.DAL.DbContext dbContext, AddressLinkDto dto, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities)
        {
            dtoEntities = dtoEntities ?? new Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity>();
            if (dtoEntities.ContainsKey(dto))
            {
                return (AddressLink)dtoEntities[dto];
            }

            AddressLink entity = new AddressLink();
            dtoEntities.Add(dto, entity);
            FromDtoSet(dbContext, dto, entity, dtoEntities);

            if (dbContext != null && (!dto.IsDeleted || !dto.IsNew))
            {
                dbContext.Entry(entity).State = (dto.IsNew ? EntityState.Added : (dto.IsDeleted ? EntityState.Deleted : EntityState.Modified));
            }

            return entity;
        }

        protected static void FromDtoSet(FACTS.Framework.DAL.DbContext dbContext, AddressLinkDto dto, AddressLink entity, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities)
        {
            entity.AddressId = dto.AddressId;
            entity.AddressLinkId = dto.AddressLinkId;
            entity.AddressTypeCode = dto.AddressTypeCode;
            entity.AgentId = dto.AgentId;
            entity.CreateDateTime = dto.CreateDateTime;
            entity.CreateUserId = dto.CreateUserId;
            entity.EmployerId = dto.EmployerId;
            entity.EmployerUnitId = dto.EmployerUnitId;
            entity.StatusCode = dto.StatusCode;
            entity.UpdateDateTime = dto.UpdateDateTime;
            entity.UpdateNumber = dto.UpdateNumber;
            entity.UpdateProcess = dto.UpdateProcess;
            entity.UpdateUserId = dto.UpdateUserId;

            var address = (dto.Address == null) ? null : Address.FromDto(dbContext, dto.Address, dtoEntities);
            entity.Address = (dto.Address == null || dto.Address.IsDeleted) ? null : address;
            var employer = (dto.Employer == null) ? null : Employer.FromDto(dbContext, dto.Employer, dtoEntities);
            entity.Employer = (dto.Employer == null || dto.Employer.IsDeleted) ? null : employer;
            var employerUnit = (dto.EmployerUnit == null) ? null : EmployerUnit.FromDto(dbContext, dto.EmployerUnit, dtoEntities);
            entity.EmployerUnit = (dto.EmployerUnit == null || dto.EmployerUnit.IsDeleted) ? null : employerUnit;
            if (dto.Correspondences != null)
            {
                foreach (CorrespondenceDto correspondenceDto in dto.Correspondences)
                {
                    var correspondence = DbEntities.Correspondence.FromDto(dbContext, correspondenceDto, dtoEntities);
                    if (correspondenceDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.Correspondences.Add(correspondence);
                }
            }
            if (dto.PremiumAppealDetails != null)
            {
                foreach (PremiumAppealDetailDto premiumAppealDetailDto in dto.PremiumAppealDetails)
                {
                    var premiumAppealDetail = DbEntities.PremiumAppealDetail.FromDto(dbContext, premiumAppealDetailDto, dtoEntities);
                    if (premiumAppealDetailDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.PremiumAppealDetails.Add(premiumAppealDetail);
                }
            }
        }

    }

    /// <summary>Extension methods related to AddressLink entity</summary>
    public static class AddressLinkExtension
    {

        /// <summary>Convert IEnumerable AddressLink to list of DTOs</summary>
        /// <param name="entities">IEnumerable AddressLinks</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO AddressLinks</returns>
        public static List<AddressLinkDto> ToDtoListDeep(this IEnumerable<AddressLink> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<AddressLinkDto> dtos = new List<AddressLinkDto>();
            foreach (AddressLink entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressLinkDto>(dtoTypes), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E AddressLink to list of DTOs</summary>
        /// <param name="entities">L2E AddressLinks</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO AddressLinks</returns>
        public static List<AddressLinkDto> ToDtoListDeep(this IQueryable<AddressLink> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<AddressLinkDto> dtos = new List<AddressLinkDto>();
            foreach (AddressLink entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressLinkDto>(dtoTypes), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E AddressLink to list of customized DTOs</summary>
        /// <typeparam name="T">Custom DTO derived from AddressLinkDto</typeparam>
        /// <param name="entities">L2E AddressLinks</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO customized AddressLinks</returns>
        public static List<T> ToDtoListDeep<T>(this IQueryable<AddressLink> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes) where T : AddressLinkDto, new()
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<T> dtos = new List<T>();
            foreach (AddressLink entity in entities)
            {
                dtos.Add((T)entity.ToDtoDeep(dbContext, new T(), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert IEnumerable AddressLink to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">IEnumerable AddressLinks</param>
        /// <returns>List of DTO AddressLinks</returns>
        public static List<AddressLinkDto> ToDtoList(this IEnumerable<AddressLink> entities)
        {
            List<AddressLinkDto> dtos = new List<AddressLinkDto>();
            foreach (AddressLink entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E AddressLink to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">L2E AddressLinks</param>
        /// <returns>List of DTO AddressLinks</returns>
        public static List<AddressLinkDto> ToDtoList(this IQueryable<AddressLink> entities)
        {
            List<AddressLinkDto> dtos = new List<AddressLinkDto>();
            foreach (AddressLink entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E AddressLink to list of customized DTOs w/o checking entity state or entity navigation</summary>
        /// <typeparam name="T">Custom DTO derived from AddressLinkDto</typeparam>
        /// <param name="entities">L2E AddressLinks</param>
        /// <returns>List of DTO customized AddressLinks</returns>
        public static List<T> ToDtoList<T>(this IQueryable<AddressLink> entities) where T : AddressLinkDto, new()
        {
            List<T> dtos = new List<T>();
            foreach (AddressLink entity in entities)
            {
                dtos.Add((T)entity.ToDto(new T()));
            }
            return dtos;
        }

    }

}
