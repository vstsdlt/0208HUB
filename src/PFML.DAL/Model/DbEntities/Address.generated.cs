// ----------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a compiler emitter: FACTS.Framework.Analysis.Generators.DAL.EntityEmitter
//
// Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using PFML.Shared.Model.DbDtos;
using FACTS.Framework.DAL;

namespace PFML.DAL.Model.DbEntities
{

    /// <summary>[Address]</summary>
    [Table("Address", Schema="dbo")]
    public class Address : BaseEntity
    {

        /// <summary>[AddressId]</summary>
        [Key]
        [Required]
        [Column("AddressId", Order=1)]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int AddressId { get; set; }

        /// <summary>[AddressLine1]</summary>
        [Required]
        [MaxLength(45)]
        [Column("AddressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>[AddressLine2]</summary>
        [MaxLength(45)]
        [Column("AddressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>[AddressVerificationCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("AddressVerificationCode")]
        public string AddressVerificationCode { get; set; }

        /// <summary>[Attention]</summary>
        [MaxLength(50)]
        [Column("Attention")]
        public string Attention { get; set; }

        /// <summary>[BusinessWebAddress]</summary>
        [MaxLength(80)]
        [Column("BusinessWebAddress")]
        public string BusinessWebAddress { get; set; }

        /// <summary>[City]</summary>
        [Required]
        [MaxLength(35)]
        [Column("City")]
        public string City { get; set; }

        /// <summary>[CountryCode]</summary>
        [Required]
        [MaxLength(20)]
        [Column("CountryCode")]
        public string CountryCode { get; set; }

        /// <summary>[CountyCode]</summary>
        [MaxLength(20)]
        [Column("CountyCode")]
        public string CountyCode { get; set; }

        /// <summary>[CreateDateTime]</summary>
        [Required]
        [Column("CreateDateTime")]
        public DateTime CreateDateTime { get; set; }

        /// <summary>[CreateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("CreateUserId")]
        public string CreateUserId { get; set; }

        /// <summary>[Email]</summary>
        [MaxLength(80)]
        [Column("Email")]
        public string Email { get; set; }

        /// <summary>[FaxNumber]</summary>
        [MaxLength(10)]
        [Column("FaxNumber")]
        public string FaxNumber { get; set; }

        /// <summary>[IntFaxNumber]</summary>
        [MaxLength(10)]
        [Column("IntFaxNumber")]
        public string IntFaxNumber { get; set; }

        /// <summary>[IntPhoneNumber]</summary>
        [MaxLength(10)]
        [Column("IntPhoneNumber")]
        public string IntPhoneNumber { get; set; }

        /// <summary>[IntPhoneNumberExtn]</summary>
        [MaxLength(5)]
        [Column("IntPhoneNumberExtn")]
        public string IntPhoneNumberExtn { get; set; }

        /// <summary>[OtherPhoneNumber]</summary>
        [MaxLength(10)]
        [Column("OtherPhoneNumber")]
        public string OtherPhoneNumber { get; set; }

        /// <summary>[OtherPhoneNumberExtn]</summary>
        [MaxLength(5)]
        [Column("OtherPhoneNumberExtn")]
        public string OtherPhoneNumberExtn { get; set; }

        /// <summary>[PhoneNumber]</summary>
        [MaxLength(10)]
        [Column("PhoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>[PhoneNumberExtn]</summary>
        [MaxLength(5)]
        [Column("PhoneNumberExtn")]
        public string PhoneNumberExtn { get; set; }

        /// <summary>[StateCode]</summary>
        [MaxLength(20)]
        [Column("StateCode")]
        public string StateCode { get; set; }

        /// <summary>[UpdateDateTime]</summary>
        [Required]
        [Column("UpdateDateTime")]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>[UpdateNumber]</summary>
        [Column("UpdateNumber")]
        [ConcurrencyCheck]
        public int? UpdateNumber { get; set; }

        /// <summary>[UpdateProcess]</summary>
        [MaxLength(100)]
        [Column("UpdateProcess")]
        public string UpdateProcess { get; set; }

        /// <summary>[UpdateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("UpdateUserId")]
        public string UpdateUserId { get; set; }

        /// <summary>[Zip]</summary>
        [MaxLength(10)]
        [Column("Zip")]
        public string Zip { get; set; }

        private ICollection<AddressLink> addressLinks { get; set; }
        public virtual ICollection<AddressLink> AddressLinks { get { return addressLinks ?? (addressLinks = new Collection<AddressLink>()); } protected set { addressLinks = value; } }

        public override void SetAuditFields(EntityState state)
        {
            string username = FACTS.Framework.Service.Context.UserName ?? "UNKNOWN";
            DateTime timestamp = FACTS.Framework.Utility.DateTimeUtil.Now;

            if (state == EntityState.Added)
            {
                CreateUserId = username;
                CreateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = 0;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
            else if (state == EntityState.Modified)
            {
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = (UpdateNumber ?? 0) + 1;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
        }

        internal static void ModelCreating(DbModelBuilder builder)
        {
            builder.Entity<Address>().Property(x => x.AddressLine1).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.AddressLine2).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.AddressVerificationCode).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.Attention).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.BusinessWebAddress).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.City).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.CountryCode).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.CountyCode).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.CreateUserId).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.Email).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.FaxNumber).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.IntFaxNumber).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.IntPhoneNumber).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.IntPhoneNumberExtn).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.OtherPhoneNumber).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.OtherPhoneNumberExtn).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.PhoneNumber).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.PhoneNumberExtn).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.StateCode).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.UpdateProcess).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.UpdateUserId).IsUnicode(false);
            builder.Entity<Address>().Property(x => x.Zip).IsUnicode(false);
        }

        /// <summary>Convert from Address entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>Resultant Address DTO</returns>
        public AddressDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            return ToDtoDeep(dbContext, null, dtoTypes, null);
        }

        /// <summary>Convert from Address entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>Resultant Address DTO</returns>
        public AddressDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, AddressDto dto, params Type[] dtoTypes)
        {
            return ToDtoDeep(dbContext, dto, dtoTypes, null);
        }

        internal AddressDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, AddressDto dto, Type[] dtoTypes, Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos)
        {
            entityDtos = entityDtos ?? new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            if (entityDtos.ContainsKey(this))
            {
                return (AddressDto)entityDtos[this];
            }

            dto = ToDto(dto);
            entityDtos.Add(this, dto);

            System.Data.Entity.Infrastructure.DbEntityEntry<Address> entry = dbContext?.Entry(this);
            dto.IsNew = (entry?.State == EntityState.Added);
            dto.IsDeleted = (entry?.State == EntityState.Deleted);

            if (entry?.Collection(x => x.AddressLinks)?.IsLoaded == true)
            {
                foreach (AddressLink addressLink in AddressLinks)
                {
                    dto.AddressLinks.Add(addressLink.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressLinkDto>(dtoTypes), dtoTypes, entityDtos));
                }
            }

            return dto;
        }

        /// <summary>Convert from Address entity to DTO w/o checking entity state or entity navigation</summary>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <returns>Resultant Address DTO</returns>
        public AddressDto ToDto(AddressDto dto = null)
        {
            dto = dto ?? new AddressDto();
            dto.IsNew = false;

            dto.AddressId = AddressId;
            dto.AddressLine1 = AddressLine1;
            dto.AddressLine2 = AddressLine2;
            dto.AddressVerificationCode = AddressVerificationCode;
            dto.Attention = Attention;
            dto.BusinessWebAddress = BusinessWebAddress;
            dto.City = City;
            dto.CountryCode = CountryCode;
            dto.CountyCode = CountyCode;
            dto.CreateDateTime = CreateDateTime;
            dto.CreateUserId = CreateUserId;
            dto.Email = Email;
            dto.FaxNumber = FaxNumber;
            dto.IntFaxNumber = IntFaxNumber;
            dto.IntPhoneNumber = IntPhoneNumber;
            dto.IntPhoneNumberExtn = IntPhoneNumberExtn;
            dto.OtherPhoneNumber = OtherPhoneNumber;
            dto.OtherPhoneNumberExtn = OtherPhoneNumberExtn;
            dto.PhoneNumber = PhoneNumber;
            dto.PhoneNumberExtn = PhoneNumberExtn;
            dto.StateCode = StateCode;
            dto.UpdateDateTime = UpdateDateTime;
            dto.UpdateNumber = UpdateNumber;
            dto.UpdateProcess = UpdateProcess;
            dto.UpdateUserId = UpdateUserId;
            dto.Zip = Zip;

            return dto;
        }

        /// <summary>Convert from Address DTO to entity</summary>
        /// <param name="dbContext">DB Context to use for attaching entity</param>
        /// <param name="dto">DTO to convert from</param>
        /// <returns>Resultant Address entity</returns>
        public static Address FromDto(FACTS.Framework.DAL.DbContext dbContext, AddressDto dto)
        {
            return FromDto(dbContext, dto, dtoEntities: null);
        }

        internal static Address FromDto(FACTS.Framework.DAL.DbContext dbContext, AddressDto dto, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities)
        {
            dtoEntities = dtoEntities ?? new Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity>();
            if (dtoEntities.ContainsKey(dto))
            {
                return (Address)dtoEntities[dto];
            }

            Address entity = new Address();
            dtoEntities.Add(dto, entity);
            FromDtoSet(dbContext, dto, entity, dtoEntities);

            if (dbContext != null && (!dto.IsDeleted || !dto.IsNew))
            {
                dbContext.Entry(entity).State = (dto.IsNew ? EntityState.Added : (dto.IsDeleted ? EntityState.Deleted : EntityState.Modified));
            }

            return entity;
        }

        protected static void FromDtoSet(FACTS.Framework.DAL.DbContext dbContext, AddressDto dto, Address entity, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities)
        {
            entity.AddressId = dto.AddressId;
            entity.AddressLine1 = dto.AddressLine1;
            entity.AddressLine2 = dto.AddressLine2;
            entity.AddressVerificationCode = dto.AddressVerificationCode;
            entity.Attention = dto.Attention;
            entity.BusinessWebAddress = dto.BusinessWebAddress;
            entity.City = dto.City;
            entity.CountryCode = dto.CountryCode;
            entity.CountyCode = dto.CountyCode;
            entity.CreateDateTime = dto.CreateDateTime;
            entity.CreateUserId = dto.CreateUserId;
            entity.Email = dto.Email;
            entity.FaxNumber = dto.FaxNumber;
            entity.IntFaxNumber = dto.IntFaxNumber;
            entity.IntPhoneNumber = dto.IntPhoneNumber;
            entity.IntPhoneNumberExtn = dto.IntPhoneNumberExtn;
            entity.OtherPhoneNumber = dto.OtherPhoneNumber;
            entity.OtherPhoneNumberExtn = dto.OtherPhoneNumberExtn;
            entity.PhoneNumber = dto.PhoneNumber;
            entity.PhoneNumberExtn = dto.PhoneNumberExtn;
            entity.StateCode = dto.StateCode;
            entity.UpdateDateTime = dto.UpdateDateTime;
            entity.UpdateNumber = dto.UpdateNumber;
            entity.UpdateProcess = dto.UpdateProcess;
            entity.UpdateUserId = dto.UpdateUserId;
            entity.Zip = dto.Zip;

            if (dto.AddressLinks != null)
            {
                foreach (AddressLinkDto addressLinkDto in dto.AddressLinks)
                {
                    var addressLink = DbEntities.AddressLink.FromDto(dbContext, addressLinkDto, dtoEntities);
                    if (addressLinkDto.IsDeleted)
                    {
                        continue;
                    }
                    entity.AddressLinks.Add(addressLink);
                }
            }
        }

    }

    /// <summary>Extension methods related to Address entity</summary>
    public static class AddressExtension
    {

        /// <summary>Convert IEnumerable Address to list of DTOs</summary>
        /// <param name="entities">IEnumerable Addresses</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO Addresses</returns>
        public static List<AddressDto> ToDtoListDeep(this IEnumerable<Address> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<AddressDto> dtos = new List<AddressDto>();
            foreach (Address entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressDto>(dtoTypes), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E Address to list of DTOs</summary>
        /// <param name="entities">L2E Addresses</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO Addresses</returns>
        public static List<AddressDto> ToDtoListDeep(this IQueryable<Address> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<AddressDto> dtos = new List<AddressDto>();
            foreach (Address entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, BaseEntity.ActivateDto<AddressDto>(dtoTypes), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E Address to list of customized DTOs</summary>
        /// <typeparam name="T">Custom DTO derived from AddressDto</typeparam>
        /// <param name="entities">L2E Addresses</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <param name="dtoTypes">Custom derived types to use for DTO's in hierarchy conversion</param>
        /// <returns>List of DTO customized Addresses</returns>
        public static List<T> ToDtoListDeep<T>(this IQueryable<Address> entities, FACTS.Framework.DAL.DbContext dbContext, params Type[] dtoTypes) where T : AddressDto, new()
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<T> dtos = new List<T>();
            foreach (Address entity in entities)
            {
                dtos.Add((T)entity.ToDtoDeep(dbContext, new T(), dtoTypes, entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert IEnumerable Address to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">IEnumerable Addresses</param>
        /// <returns>List of DTO Addresses</returns>
        public static List<AddressDto> ToDtoList(this IEnumerable<Address> entities)
        {
            List<AddressDto> dtos = new List<AddressDto>();
            foreach (Address entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E Address to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">L2E Addresses</param>
        /// <returns>List of DTO Addresses</returns>
        public static List<AddressDto> ToDtoList(this IQueryable<Address> entities)
        {
            List<AddressDto> dtos = new List<AddressDto>();
            foreach (Address entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E Address to list of customized DTOs w/o checking entity state or entity navigation</summary>
        /// <typeparam name="T">Custom DTO derived from AddressDto</typeparam>
        /// <param name="entities">L2E Addresses</param>
        /// <returns>List of DTO customized Addresses</returns>
        public static List<T> ToDtoList<T>(this IQueryable<Address> entities) where T : AddressDto, new()
        {
            List<T> dtos = new List<T>();
            foreach (Address entity in entities)
            {
                dtos.Add((T)entity.ToDto(new T()));
            }
            return dtos;
        }

    }

}
