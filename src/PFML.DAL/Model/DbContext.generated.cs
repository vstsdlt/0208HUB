// ----------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a compiler emitter: FACTS.Framework.Analysis.Generators.DAL.ContextEmitter
//
// Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Linq;
using PFML.DAL.Model.DbEntities;

namespace PFML.DAL.Model
{

    [DbConfigurationType(typeof(FACTS.Framework.DAL.DbConfigurationSqlServer))]
    public class DbContext : FACTS.Framework.DAL.DbContext
    {

        protected override string ModelPrefix { get { return "Db"; } }
        protected override string ModelVersion { get { return "180206134301"; } }

        /// <summary>Static initializer to remove initial calls to DB (not requred if not using migrations)</summary>
        static DbContext()
        {
            Database.SetInitializer<DbContext>(null);
        }

        /// <summary>Constructor</summary>
        public DbContext()
        {
            Database.Log = (log) =>
            {
                if (System.Diagnostics.Debugger.IsAttached)
                {
                    System.Diagnostics.Debug.WriteLine(log);
                }
                FACTS.Framework.Logging.Logger.LogDatabase(log);
            };
        }

        /// <summary>[Table: Address]</summary>
        public virtual DbSet<Address> Addresses { get; set; }

        /// <summary>[Table: AddressLink]</summary>
        public virtual DbSet<AddressLink> AddressLinks { get; set; }

        /// <summary>[Table: Correspondence]</summary>
        public virtual DbSet<Correspondence> Correspondences { get; set; }

        /// <summary>[Table: Document]</summary>
        public virtual DbSet<Document> Documents { get; set; }

        /// <summary>[Table: Employer]</summary>
        public virtual DbSet<Employer> Employers { get; set; }

        /// <summary>[Table: EmployerAccountTransaction]</summary>
        public virtual DbSet<EmployerAccountTransaction> EmployerAccountTransactions { get; set; }

        /// <summary>[Table: EmployerContact]</summary>
        public virtual DbSet<EmployerContact> EmployerContacts { get; set; }

        /// <summary>[Table: EmployerLiability]</summary>
        public virtual DbSet<EmployerLiability> EmployerLiabilities { get; set; }

        /// <summary>[Table: EmployerPreference]</summary>
        public virtual DbSet<EmployerPreference> EmployerPreferences { get; set; }

        /// <summary>[Table: EmployerUnit]</summary>
        public virtual DbSet<EmployerUnit> EmployerUnits { get; set; }

        /// <summary>[Table: Form]</summary>
        public virtual DbSet<Form> Forms { get; set; }

        /// <summary>[Table: FormAttachment]</summary>
        public virtual DbSet<FormAttachment> FormAttachments { get; set; }

        /// <summary>[Table: LookupCode]</summary>
        public virtual DbSet<LookupCode> LookupCodes { get; set; }

        /// <summary>[Table: LookupName]</summary>
        public virtual DbSet<LookupName> LookupNames { get; set; }

        /// <summary>[Table: LookupProperty]</summary>
        public virtual DbSet<LookupProperty> LookupProperties { get; set; }

        /// <summary>[Table: LookupValue]</summary>
        public virtual DbSet<LookupValue> LookupValues { get; set; }

        /// <summary>[Table: Note]</summary>
        public virtual DbSet<Note> Notes { get; set; }

        /// <summary>[Table: NoteSet]</summary>
        public virtual DbSet<NoteSet> NoteSets { get; set; }

        /// <summary>[Table: PaymentMain]</summary>
        public virtual DbSet<PaymentMain> PaymentMains { get; set; }

        /// <summary>[Table: PaymentProfile]</summary>
        public virtual DbSet<PaymentProfile> PaymentProfiles { get; set; }

        /// <summary>[Table: PremiumAppealDetail]</summary>
        public virtual DbSet<PremiumAppealDetail> PremiumAppealDetails { get; set; }

        /// <summary>[Table: PremiumAppealHeader]</summary>
        public virtual DbSet<PremiumAppealHeader> PremiumAppealHeaders { get; set; }

        /// <summary>[Table: PremiumRate]</summary>
        public virtual DbSet<PremiumRate> PremiumRates { get; set; }

        /// <summary>[Table: ResourceTemplate]</summary>
        public virtual DbSet<ResourceTemplate> ResourceTemplates { get; set; }

        /// <summary>[Table: SecurityDefinition]</summary>
        public virtual DbSet<SecurityDefinition> SecurityDefinitions { get; set; }

        /// <summary>[Table: SecurityPermission]</summary>
        public virtual DbSet<SecurityPermission> SecurityPermissions { get; set; }

        /// <summary>[Table: TaxableAmountSum]</summary>
        public virtual DbSet<TaxableAmountSum> TaxableAmountSums { get; set; }

        /// <summary>[Table: VoluntaryPlanWaiverRequest]</summary>
        public virtual DbSet<VoluntaryPlanWaiverRequest> VoluntaryPlanWaiverRequests { get; set; }

        /// <summary>[Table: VoluntaryPlanWaiverRequestType]</summary>
        public virtual DbSet<VoluntaryPlanWaiverRequestType> VoluntaryPlanWaiverRequestTypes { get; set; }

        /// <summary>[Table: WageUnitDetail]</summary>
        public virtual DbSet<WageUnitDetail> WageUnitDetails { get; set; }

        ///<summary>IQueryable to use for returing only a single row from a DB query</summary>
        public IQueryable<LookupCode> DummyRecord { get { return LookupCodes.Take(1); } }

        #region Model Creation

        private static DbModel BuildModel()
        {
            DbModelBuilder builder = new DbModelBuilder();

            builder.Entity<Address>();
            builder.Entity<AddressLink>();
            builder.Entity<Correspondence>();
            builder.Entity<Document>();
            builder.Entity<Employer>();
            builder.Entity<EmployerAccountTransaction>();
            builder.Entity<EmployerContact>();
            builder.Entity<EmployerLiability>();
            builder.Entity<EmployerPreference>();
            builder.Entity<EmployerUnit>();
            builder.Entity<Form>();
            builder.Entity<FormAttachment>();
            builder.Entity<LookupCode>();
            builder.Entity<LookupName>();
            builder.Entity<LookupProperty>();
            builder.Entity<LookupValue>();
            builder.Entity<Note>();
            builder.Entity<NoteSet>();
            builder.Entity<PaymentMain>();
            builder.Entity<PaymentProfile>();
            builder.Entity<PremiumAppealDetail>();
            builder.Entity<PremiumAppealHeader>();
            builder.Entity<PremiumRate>();
            builder.Entity<ResourceTemplate>();
            builder.Entity<SecurityDefinition>();
            builder.Entity<SecurityPermission>();
            builder.Entity<TaxableAmountSum>();
            builder.Entity<VoluntaryPlanWaiverRequest>();
            builder.Entity<VoluntaryPlanWaiverRequestType>();
            builder.Entity<WageUnitDetail>();

            DbEntities.Address.ModelCreating(builder);
            DbEntities.AddressLink.ModelCreating(builder);
            DbEntities.Correspondence.ModelCreating(builder);
            DbEntities.Document.ModelCreating(builder);
            DbEntities.Employer.ModelCreating(builder);
            DbEntities.EmployerAccountTransaction.ModelCreating(builder);
            DbEntities.EmployerContact.ModelCreating(builder);
            DbEntities.EmployerLiability.ModelCreating(builder);
            DbEntities.EmployerPreference.ModelCreating(builder);
            DbEntities.EmployerUnit.ModelCreating(builder);
            DbEntities.Form.ModelCreating(builder);
            DbEntities.FormAttachment.ModelCreating(builder);
            DbEntities.LookupCode.ModelCreating(builder);
            DbEntities.LookupName.ModelCreating(builder);
            DbEntities.LookupProperty.ModelCreating(builder);
            DbEntities.LookupValue.ModelCreating(builder);
            DbEntities.Note.ModelCreating(builder);
            DbEntities.NoteSet.ModelCreating(builder);
            DbEntities.PaymentMain.ModelCreating(builder);
            DbEntities.PaymentProfile.ModelCreating(builder);
            DbEntities.PremiumAppealDetail.ModelCreating(builder);
            DbEntities.PremiumAppealHeader.ModelCreating(builder);
            DbEntities.PremiumRate.ModelCreating(builder);
            DbEntities.ResourceTemplate.ModelCreating(builder);
            DbEntities.SecurityDefinition.ModelCreating(builder);
            DbEntities.SecurityPermission.ModelCreating(builder);
            DbEntities.TaxableAmountSum.ModelCreating(builder);
            DbEntities.VoluntaryPlanWaiverRequest.ModelCreating(builder);
            DbEntities.VoluntaryPlanWaiverRequestType.ModelCreating(builder);
            DbEntities.WageUnitDetail.ModelCreating(builder);

            DbModel model = builder.Build(new DbProviderInfo("System.Data.SqlClient", "2008"));

            return model;
        }

        private static void AlterModel(FACTS.Framework.DAL.ModelAlteration model)
        {
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "CreateDateTime");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "CreateUserId");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateDateTime");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateNumber");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateProcess");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateUserId");
        }

        #endregion

    }

}
